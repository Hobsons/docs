<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="weblogic_setting_up_the_module">
	<title>Setting Up the HTTP Module for AppServers </title>
	<shortdesc>To use the module, you need to modify your application's <codeph>web.xml</codeph>
		files. Configuration is slightly different depending on the topology you are setting up. </shortdesc>
	<conbody>
		<ul id="ul_7A2ABB87B3A0442184CD7E48C5DF2154">
			<li id="li_2EDB5439D65B40BA8FD6427FD4FF3247">
				<xref
					href="weblogic_setting_up_the_module.xml#weblogic_setting_up_the_module/section_23739CE6FE8B4590A7A10B334AC0D017"
					type="section" format="dita" scope="local"/>
			</li>
			<li id="li_083201D8E3F9486284CB988A6DF779CD">
				<xref
					href="weblogic_setting_up_the_module.xml#weblogic_setting_up_the_module/section_9D330F0A9E934B209D77C5A5D79B741C"
					type="section" format="dita" scope="local"/>
			</li>
			<li id="li_1CD51B69DE1F46DB9F98EBC9A66D2BF6">
				<xref
					href="weblogic_setting_up_the_module.xml#weblogic_setting_up_the_module/section_20294A39368D4402AEFB3D074E8D5887"
					type="section" format="dita" scope="local"/>
			</li>
			<li id="li_17138A24E05E4D46A109A0C6DC478484">
				<xref
					href="weblogic_setting_up_the_module.xml#weblogic_setting_up_the_module/section_B0CEBE93564540DBA165E0F7A10FDC0B"
					type="section" format="dita" scope="local"/>
			</li>
			<li id="li_7383947B33EF4B7CB7432048383688B0">
				<xref
					href="weblogic_setting_up_the_module.xml#weblogic_setting_up_the_module/section_2B97047AB30A4C549D91AD258657FBA6"
					type="section" format="dita" scope="local"/>
			</li>
			<li id="li_188AF7E7A49F4D8CA8F33948E176C8A0">
				<xref
					href="weblogic_setting_up_the_module.xml#weblogic_setting_up_the_module/section_3E186713737E4D5383E23B41CDFED59B"
					type="section" format="dita" scope="local"/>
			</li>
			<li id="li_1721D98CE81C46109F916BB507608844">
				<xref
					href="weblogic_setting_up_the_module.xml#weblogic_setting_up_the_module/section_E0E0E5A1C9484D4AA13878273F16A920"
					type="section" format="dita" scope="local"/>
			</li>
		</ul>
		<p>Refer to <xref href="common_gemfire_topologies.xml#common_gemfire_topologies"
				type="concept" format="dita" scope="local"/> for more information. Modifying the war
			file is typically done with the <codeph>modify_war</codeph> script, but could also be
			performed manually. </p>
		<section id="section_23739CE6FE8B4590A7A10B334AC0D017">
			<title>Using the modify_war Script</title>
			<p>The script has the following options: </p>
			<codeblock>USAGE: modify_war &lt;args&gt;
WHERE &lt;args&gt;:

    -e &lt;jar&gt;
                    Assumes the input file is an .ear file and will add the
                    given jar as a shared, application library. The file will
                    be added in a /lib directory (by default) and any embedded
                    .war files will have a corresponding Class-Path entry added
                    to their MANIFEST.MF file. The option can be given multiple times.

    -h
                    Displays this help message.

    -j &lt;jar&gt;
                    Additional library to add to the input file. Can be given
                    multiple times.

    -J &lt;jvm opt&gt;
                    JVM argument to pass to sub-commands. Typically this might
                    be to define proxy values. For example -J"-Dhttp.proxyHost=my-proxy"

    -l &lt;lib&gt;
                    Library directory where new jars will be placed inside war.
                    Defaults to WEB-INF/lib.

    -m &lt;lib&gt;
                    Library directory where new jars will be placed inside ear.
                    Defaults to /lib.

    -o &lt;file&gt;
                    The output file.

    -p &lt;param=value&gt;
                    Specific parameter for inclusion into the session filter
                    definition as a regular init-param. Can be given multiple times.

    -r
                    Test run which only outputs an updated web.xml file.

    -t &lt;cache-type&gt;
                    Type of cache. Must be one of 'peer-to-peer' or
                    'client-server'. Default is peer-to-peer.

    -v 
                    Verbose output

    -w &lt;war/ear file&gt;
                    The input file - either a WAR or EAR. The following actions
                    will be performed depending on the type of file:
                    WARs will have a &lt;filter&gt; element added to the web.xml and
                    will have the appropriate jars copied to WEB-INF/lib.
                    If the file is an EAR, then the appropriate jars will be
                    copied to lib, within the ear and each embedded war files'
                    manifest will have a Class-Path entry added (if one does
                    not already exist).
                    An appropriate slf4j binding jar must be included for ears
                    or wars using -e or -j respectively. The following jars are
                    provided:
                        slf4j-jdk14
                        slf4j-log4j12
                        gemfire-modules-slf4j-weblogic

    -x
                    Do not create a self-contained war/ear file by copying all
                    necessary jars into the file. When this option is used,
                    additional jars will need to be made available to the
                    container:
                        gemfire.jar
                        gemfire-modules.jar
                        gemfire-modules-session.jar
                        slf4j-api.jar
                        slf4j-jdk14.jar (not for WebLogic)
                        gemfire-modules-slf4j-weblogic.jar (WebLogic only)
                    This option still modifes any web.xml files.
      </codeblock>
		</section>
		<section id="section_9D330F0A9E934B209D77C5A5D79B741C">
			<title>Manual Configuration</title>
			<p>To modify your war or ear file manually, make the following updates: </p>
			<p>
				<ul id="ul_pxj_ozt_wg">
					<li id="li_116ED361927E42A4BA5B03CAA78B7C74"><b>web.xml</b> needs a filter and
						listener added as follows. If you have your own filters, the <keyword
							keyref="product_name"/> Module filter <b>must</b> be the first one.
						<codeblock>&lt;filter&gt;
    &lt;filter-name&gt;gemfire-session-filter&lt;/filter-name&gt;
    &lt;filter-class&gt;
      com.gemstone.gemfire.modules.session.filter.SessionCachingFilter
    &lt;/filter-class&gt;
    &lt;init-param&gt;
        &lt;param-name&gt;cache-type&lt;/param-name&gt;
        &lt;param-value&gt;peer-to-peer&lt;/param-value&gt;
    &lt;/init-param&gt;
&lt;/filter&gt;
&lt;filter-mapping&gt;
    &lt;filter-name&gt;gemfire-session-filter&lt;/filter-name&gt;
    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
    &lt;dispatcher&gt;FORWARD&lt;/dispatcher&gt;
    &lt;dispatcher&gt;INCLUDE&lt;/dispatcher&gt;
    &lt;dispatcher&gt;REQUEST&lt;/dispatcher&gt;
    &lt;dispatcher&gt;ERROR&lt;/dispatcher&gt;
&lt;/filter-mapping&gt;
&lt;listener&gt;
    &lt;listener-class&gt;com.gemstone.gemfire.modules.session.filter.SessionListener&lt;/listener-class&gt;
&lt;/listener&gt;
</codeblock>
					</li>
					<li id="li_D07F66CFBC5147ACA120F34BCDC9444D">Add
							<codeph>gemfire-modules-session-external.jar</codeph> to the WEB-INF/lib
						directory of the war. </li>
				</ul>
			</p>
			<p>If you are deploying an ear file and wish to bundle all dependent jars within the ear
				then the following steps are also required: </p>
			<p>
				<ul id="ul_sca_abu_wg">
					<li id="li_B7885246FB3045628DAFB6CF42A82531">Copy the dependent files to the lib
						directory of the ear. <ul id="ul_ciz_dbu_wg">
							<li id="li_4B33B0B7FDD446D29FB999B624BB6E80">gemfire.jar </li>
							<li id="li_C2EACDD48041431FB1B2309D19882E36">gemfire-modules.jar </li>
							<li id="li_D210AC64A286426F878ED5BAEA10F3CA">gemfire-modules-session.jar </li>
							<li id="li_71D1C218248449759CE658F4C73C0B73">slf4j-api.jar </li>
							<li id="li_5DDF9AB9878E4D3083EED62F9146F5BA">slf4j-jdk14.jar (not
								necessary for WebLogic) </li>
							<li id="li_6AF652CC66E847549621C910A45FBEC1"
								>gemfire-modules-slf4j-weblogic.jar (only for WebLogic) </li>
						</ul>
					</li>
					<li id="li_D9451226FF2643B5AC07D612A6A90CCF">Modify each embedded war file's
						manifest by adding a Class-Path entry which references the shared jars added
						above. For example:
						<codeblock>Manifest-Version: 1.0
Built-By: joe
Build-Jdk: 1.6.0_22
Created-By: Apache Maven
Archiver-Version: Plexus Archiver
Class-Path: lib/gemfire-6.6.3.jar 
 lib/gemfire-modules-2.1.1.1.jar 
 lib/gemfire-modules-session-2.1.1.1.jar 
 lib/slf4j-api-1.5.8.jar 
 lib/slf4j-jdk14-1.5.8.jar
</codeblock>
					</li>
				</ul>
			</p>
		</section>
		<section id="section_20294A39368D4402AEFB3D074E8D5887">
			<title>Peer-to-Peer Setup</title>
			<image href="../../images_svg/http_module_p2p.svg" placement="break"
				id="image_F46F5FE6364C4162B615A51A3C11BDB4"/>
			<p> To run <keyword keyref="product_name"/> in a peer-to-peer configuration, use the
					<b>-t peer-to-peer</b> option to the <codeph>modify_war</codeph> script. This
				adds the following to web.xml: </p>
			<codeblock>&lt;filter&gt;
    &lt;filter-name&gt;gemfire-session-filter&lt;/filter-name&gt;
    &lt;filter-class&gt;
      com.gemstone.gemfire.modules.session.filter.SessionCachingFilter
    &lt;/filter-class&gt;
    &lt;init-param&gt;
        &lt;param-name&gt;cache-type&lt;/param-name&gt;
        &lt;param-value&gt;peer-to-peer&lt;/param-value&gt;
    &lt;/init-param&gt;
&lt;/filter&gt;</codeblock>
			<p>If you do not make any further configuration changes, peers attempt to locate each
				other using a default multicast channel (as defined by the mcast-port property found
				in <xref
					href="weblogic_common_configuration_changes.xml#weblogic_common_cfg_changes/section_0124499478F94E5A93029DE7CFED4819"
					type="section" format="dita" scope="local"
					><?xm-replace_text Using a Different Multicast Port?></xref>). Refer to <xref
					href="weblogic_common_configuration_changes.xml#weblogic_common_cfg_changes/p2p_locators"
					type="section" format="dita" scope="local"
					><?xm-replace_text Peer-to-Peer Configuration Using Locators?></xref> for
				information on creating and using locators, which provide both discovery and load
				balancing services. </p>
			<p><keyword keyref="product_name"/> properties can be set with filter params prefixed
				with gemfire.property. Thus, to use a specific multicast port you would use the
				following option: <codeph>-p gemfire.property.mcast-port=12345 -t
					peer-to-peer</codeph>. This would create the xml below: </p>
			<codeblock>&lt;filter&gt;
    &lt;filter-name&gt;gemfire-session-filter&lt;/filter-name&gt;
    &lt;filter-class&gt;
      com.gemstone.gemfire.modules.session.filter.SessionCachingFilter
    &lt;/filter-class&gt;
    &lt;init-param&gt;
        &lt;param-name&gt;cache-type&lt;/param-name&gt;
        &lt;param-value&gt;peer-to-peer&lt;/param-value&gt;
    &lt;/init-param&gt;
    &lt;init-param&gt;
        &lt;param-name&gt;gemfire.property.mcast-port&lt;/param-name&gt;
        &lt;param-value&gt;12345&lt;/param-value&gt;
    &lt;/init-param&gt;
&lt;/filter&gt;</codeblock>
		</section>
		<section id="section_B0CEBE93564540DBA165E0F7A10FDC0B">
			<title>Client/Server Setup</title>
			<image href="../../images_svg/http_module_cs.svg" placement="break"
				id="image_F5EDF6FE394E45C7943DA457DF5586F8"/>
			<p> To run <keyword keyref="product_name"/> in a client/server configuration, you make
				the application server operate as a <keyword keyref="product_name"/> client. Use the
					<codeph>-t client-server</codeph> option to the <codeph>modify_war</codeph>
				script. This adds the following filter to application server's web.xml file: </p>
			<codeblock>&lt;filter&gt;
    &lt;filter-name&gt;gemfire-session-filter&lt;/filter-name&gt;
    &lt;filter-class&gt;
      com.gemstone.gemfire.modules.session.filter.SessionCachingFilter
    &lt;/filter-class&gt;
    &lt;init-param&gt;
        &lt;param-name&gt;cache-type&lt;/param-name&gt;
        &lt;param-value&gt;client-server&lt;/param-value&gt;
    &lt;/init-param&gt;
&lt;/filter&gt;</codeblock>
			<p> Because the application server operates as a <keyword keyref="product_name"/> client
				in this configuration, you must manually launch a <keyword keyref="product_name"/>
				cache server. You can do this with the following script (which should be installed
				into the bin subdirectory): </p>
			<codeblock>In Unix: 
  prompt$ ./cacheserver.sh start
  
In Windows:
  prompt&gt; cacheserver.bat start </codeblock>
			<p>See <xref
					href="../../configuring/running/running_the_cacheserver.xml"
					type="concept" format="dita" scope="local"/> for more information on using this
				script. </p>
			<p>If you plan to use the deprecated cacheserver script that comes with the standalone
					<keyword keyref="product_name"/> product, you will need to manually add the
				following items to the <keyword keyref="product_name"/> server's classpath. Note
				that these JARs and file directory are automatically added to the classpath by the
				supplied cacheserver.sh (or cacheserver.bat) script that comes with the <keyword
					keyref="product_name"/> HTTP Session Management Module for AppServers. </p>
			<ul id="ul_3590AD08BCB04B0B842068950BDC6E62">
				<li id="li_834404F45E9241E68A91BED1E21CB019"
						>$GEMFIRE/lib/gemfire-modules-<i>X.X.X</i>.jar </li>
				<li id="li_4F2C49AEF27B47FD87F11A9F125BF020"
						>$GEMFIRE/lib/gemfire-modules-session-<i>X.X.X</i>.jar</li>
				<li>$GEMFIRE/lib/gemfire-modules-session-external-<i>X.X.X</i>.jar</li>
				<li>$GEMFIRE/lib/servlet-api-2.5.jar</li>
				<li id="li_50AC4F34973145819DAF1807F8C82437">$GEMFIRE/lib/slf4j-api-1.5.8.jar </li>
				<li id="li_8243983C61D44AA19C3D9303DFE89AD0">$GEMIFRE/lib/slf4j-jdk14-1.5.8.jar </li>
				<li>$GEMFIRE/conf</li>
			</ul>
			<p>where <i>X.X.X</i> corresponds to the version of <keyword keyref="product_name"/> you
				are using.</p>
			<p>Without making any further configuration changes, the client and server attempt to
				locate each other on the same system using a default port (40404). Though useful for
				testing purposes, you would not normally deploy a client/server configuration in
				this way. Refer to <xref
					href="weblogic_common_configuration_changes.xml#weblogic_common_cfg_changes/section_621D805DB63F46AFBC1EE8D25E4169D8"
					type="section" format="dita" scope="local"
					><?xm-replace_text Client/Server Configuration Using Locators?></xref> for
				information on creating and using Locators, which provide both discovery and load
				balancing services. </p>
		</section>
		<section id="section_2B97047AB30A4C549D91AD258657FBA6">
			<title>Starting the Application Server</title>
			<p> After you update the configuration, you are now ready to start your application
				server instance. Refer to your application server documentation for starting the
				application server. Once the application server is started, <keyword
					keyref="product_name"/> will automatically launch within the application server
				process. </p>
		</section>
		<section id="section_3E186713737E4D5383E23B41CDFED59B">
			<title>Verifying that <keyword keyref="product_name"/> Started</title>
			<p>You can verify that <keyword keyref="product_name"/> has successfully started by
				inspecting the application server log file. For example: </p>
			<codeblock>####&lt;Feb 22, 2011 10:34:34 AM PST&gt; &lt;Info&gt; ... &lt;BEA-000000&gt; 
    &lt;Creating distributed system from: 
    {log-file=user/weblogic/domain1/servers/myserver/
     logs/gemfire_modules.2011-02-22.log,
    cache-xml-file=cache.xml}&gt;
####&lt;Feb 22, 2011 10:34:39 AM PST&gt; &lt;Info&gt; ... &lt;BEA-000000&gt; 
    &lt;Created GemFireCache[id = 28354945; isClosing = false; 
    created = Tue Feb 22 10:34:39 PST 2011; server = false; 
    copyOnRead = false; lockLease = 120; lockTimeout = 60]&gt;</codeblock>
			<p>Information is also logged within the <keyword keyref="product_name"/> log file,
				which by default is named "<codeph>gemfire_modules.&lt;date&gt;.log</codeph>". </p>
		</section>
		<section id="section_E0E0E5A1C9484D4AA13878273F16A920">
			<title>Configuring Non-Sticky Session Replication</title>
			<p>Some situations require sessions to be 'non-sticky', which means that client requests
				can be directed to any server in a cluster of application servers instead of the
				same server each time. To achieve this, you must configure your deployment as
				described for the following topologies. </p>
			<p>
				<b>Peer-to-Peer</b>
			</p>
			<p>No additional configuration is required. </p>
			<p>
				<b>Client-Server</b>
			</p>
			<p>For client-server topologies, the local client cache must be empty. Ensure that the
				filter property <codeph>gemfire.cache.enable_local_cache=false</codeph> is set. This
				effectively sets the local client cache to be a <b>PROXY</b> cache. </p>
			<p>
				<note>Non-sticky sessions affect performance because sessions need to be re-created
					every time a request hits a different server. This may not be noticeable when
					the session attributes are small, but may become more evident as the session
					attributes increase in size and/or number. </note>
			</p>
		</section>
	</conbody>
</concept>
