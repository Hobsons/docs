<?xml version="1.0"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_F8D96C21C8444F99B47909CDEB86E60A">
	<title>Basic Transaction Example</title>
	<shortdesc>This example operates on two replicated regions. It begins a transaction, updates one
		entry in each region, and commits the result. </shortdesc>
	<conbody>
		<section id="section_B6818C348224456387DEC5C9D3B5F250">
			<p>If the commit fails, it will be due to a <codeph>CommitConflictException</codeph>, which
				implies that a concurrent access caused a change to one of the items operated on
				within this transaction. This code fragment catches the exception, and it repeats
				the transaction attempt until the commit succeeds. </p>
			<codeblock>Cache c = new CacheFactory().create();

Region&lt;String, Integer&gt; cash = c.createRegionFactory&lt;String, Integer&gt;()
	.setDataPolicy(DataPolicy.REPLICATE)
	.create("cash");

Region&lt;String, Integer&gt; trades = c.createRegionFactory&lt;String, Integer&gt;()
	.setDataPolicy(DataPolicy.REPLICATE)
	.create("trades");

CacheTransactionManager txmgr = c.getCacheTransactionManager();
boolean commitConflict = false;
do {
	try {
		txmgr.begin();
		final String customer = "Customer1";
		final Integer purchase = Integer.valueOf(1000);
		// Decrement cash
		Integer cashBalance = cash.get(customer);
		Integer newBalance = 
			Integer.valueOf((cashBalance != null ? cashBalance : 0) 
				- purchase);
		cash.put(customer, newBalance);
		// Increment trades
		Integer tradeBalance = trades.get(customer);
		newBalance = 
			Integer.valueOf((tradeBalance != null ? tradeBalance : 0) 
				+ purchase);

		trades.put(customer, newBalance);
		txmgr.commit();
		commitConflict = false;
	} 
	catch (CommitConflictException conflict) {
		commitConflict = true;
	}
} while (true == commitConflict);</codeblock>
		</section>
	</conbody>
</concept>
