<?xml version="1.0"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_F8D96C21C8444F99B47909CDEB86E60A">
	<title>Basic Transaction Example</title>
	<shortdesc>This example begins a transaction, updates two replicated regions,
			<codeph>cash</codeph> and <codeph>trades</codeph>, and commits. </shortdesc>
	<conbody>
		<section id="section_B6818C348224456387DEC5C9D3B5F250">
			<p>If the commit fails, it throws a <codeph>CommitConflictException</codeph> and the
				transaction is rolled back. In this example, this type of exception could only occur
				if there was concurrent access to the same key and value inside another transaction. </p>
			<codeblock>Cache c = new CacheFactory().create();

Region&lt;String, Integer&gt; cash = c.createRegionFactory&lt;String, Integer&gt;()
	.setDataPolicy(DataPolicy.REPLICATE)
	.create("cash");

Region&lt;String, Integer&gt; trades = c.createRegionFactory&lt;String, Integer&gt;()
	.setDataPolicy(DataPolicy.REPLICATE)
	.create("trades");

CacheTransactionManager txmgr = c.getCacheTransactionManager();
try {
	txmgr.begin();
	final String customer = "Customer1";
	final Integer purchase = Integer.valueOf(1000);
// Decrement cash
	Integer cashBalance = cash.get(customer);
	Integer newBalance = 
		Integer.valueOf((cashBalance != null ? cashBalance : 0) 
			- purchase);
	cash.put(customer, newBalance);
// Increment trades
	Integer tradeBalance = trades.get(customer);
	newBalance = 
		Integer.valueOf((tradeBalance != null ? tradeBalance : 0) 
			+ purchase);

	trades.put(customer, newBalance);
	txmgr.commit();
} 
catch (CommitConflictException conflict)</codeblock>
		</section>
	</conbody>
</concept>
