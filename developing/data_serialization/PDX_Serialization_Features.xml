<?xml version="1.0"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_F02E40517C4B42F2A75B133BB507C626">
	<title><keyword keyref="product_name"/> PDX Serialization Features</title>
	<shortdesc><keyword keyref="product_name"/> PDX serialization offers several advantages in terms
		of functionality. </shortdesc>
	<conbody>
		<section id="section_A0EEB4DA3E9F4EA4B65FE727D3951EA1">
			<title>Application Versioning of PDX Domain Objects</title>
			<p>Domain objects evolve along with your application code. You might create an address
				object with two address lines, then realize later that a third line is required for
				some situations. Or you might realize that a particular field is not used and want
				to get rid of it. With PDX, you can use old and new versions of domain objects
				together in a distributed system if the versions differ by the addition or removal
				of fields. This compatibility lets you gradually introduce modified code and data
				into the system, without bringing the system down. </p>
			<p><keyword keyref="product_name"/> maintains a central registry of the PDX domain
				object metadata. Using the registry, <keyword keyref="product_name"/> preserves
				fields in each member's cache regardless of whether the field is defined. When a
				member receives an object with a registered field that the member is not aware of,
				the member does not access the field, but preserves it and passes it along with the
				entire object to other members. When a member receives an object that is missing one
				or more fields according to the member's version, <keyword keyref="product_name"/>
				assigns the Java default values for the field types to the missing fields. </p>
		</section>
		<section id="section_D68A6A9C2C0C4D32AE7DADA2A4C3104D">
			<title>Portability of PDX Serializable Objects</title>
			<p>When you serialize an object using PDX, <keyword keyref="product_name"/> stores the
				object's type information in the central registry. The information is passed among
				clients and servers, peers, and distributed systems. </p>
			<p>This centralization of object type information is advantageous for client/server
				installations in which clients and servers are written in different languages.
				Clients pass registry information to servers automatically when they store a PDX
				serialized object. Clients can run queries and functions against the data in the
				servers without compatibility between server and the stored objects. One client can
				store data on the server to be retrieved by another client, with no requirements on
				the part of the server. </p>
		</section>
		<section id="section_08C901A3CF3E438C8778F09D482B9A63">
			<title>Reduced Deserialization of Serialized Objects</title>
			<p>The access methods of PDX serialized objects allow you to examine specific fields of
				your domain object without deserializing the entire object. Depending on your object
				usage, you can reduce serialization and deserialization costs significantly. </p>
			<p>Java and other clients can run queries and execute functions against the objects in
				the server caches without deserializing the entire object on the server side. The
				query engine automatically recognizes PDX objects, retrieves the
					<codeph>PdxInstance</codeph> of the object and uses only the fields it needs.
				Likewise, peers can access only the necessary fields from the serialized object,
				keeping the object stored in the cache in serialized form. </p>
		</section>
	</conbody>
</concept>
