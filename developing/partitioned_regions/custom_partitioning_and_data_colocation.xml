<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="custom_partitioning_and_data_colocation">
	<title>Understanding Custom Partitioning and Data Colocation</title>
	<shortdesc id="shortdesc_9C458F51BE9F449D8335C5CC2B831639"> Custom partitioning and data
		colocation can be used separately or in conjunction with one another. </shortdesc>
	<conbody>
		<section id="section_ABFEE9CB17AF44F1AE252AC10FB5E999">
			<title>Custom Partitioning</title>
			<p> Use custom partitioning to group like entries into region buckets within a region.
				By default, <keyword keyref="product_name"/> assigns new entries to buckets based on
				the entry key contents. With custom partitioning, you can assign your entries to
				buckets in whatever way you want. </p>
			<p>You can generally get better performance if you use custom partitioning to group
				similar data within a region. For example, a query run on all accounts created in
				January runs faster if all January account data is hosted by a single member.
				Grouping all data for a single customer can improve performance of data operations
				that work on customer data. Data aware function execution takes advantage of custom
				partitioning. </p>
			<p>This figure shows a region with customer data that is grouped into buckets by
				customer. </p>
			<p>
				<image id="image_1D37D547D3244171BB9CADAEC88E7649"
					href="../../images_svg/custom_partitioned.svg" placement="inline"/>
			</p>
			<p>With custom partitioning, you have two choices: </p>
			<ul id="ul_3EB14485459947A69A99E303D8CEBF40">
				<li id="li_C42221FC66324079A7AF749EDEC584EC"><b>Standard custom partitioning</b>.
					With standard partitioning, you group entries into buckets, but you do not
					specify where the buckets reside. <keyword keyref="product_name"/> always keeps
					the entries in the buckets you have specified, but may move the buckets around
					for load balancing. </li>
				<li id="li_ACEA8DB2D2F64E10978294C378414089"><b>Fixed custom partitioning</b>. With
					fixed partitioning, you provide standard partitioning plus you specify the exact
					member where each data entry resides. You do this by assigning the data entry to
					a bucket and to a partition and by naming specific members as primary and
					secondary hosts of each partition. <p>This gives you complete control over the
						locations of your primary and any secondary buckets for the region. This can
						be useful when you want to store specific data on specific physical machines
						or when you need to keep data close to certain hardware elements. </p>
					<p>Fixed partitioning has these requirements and caveats: </p><ul
						id="ul_694F383684354039A68BB0FF825E7657">
						<li id="li_04CE6E6821BD4FA38B32BBE5C8827A74"><keyword keyref="product_name"
							/> cannot rebalance fixed partition region data because it cannot move
							the buckets around among the host members. You must carefully consider
							your expected data loads for the partitions you create. </li>
						<li id="li_9152B946B835432E859E25EDE0BB7706">With fixed partitioning, the
							region configuration is different between host members. Each member
							identifies the named partitions it hosts, and whether it is hosting the
							primary copy or a secondary copy. You then program fixed partition
							resolver to return the partition id, so the entry is placed on the right
							members. Only one member can be primary for a particular partition name
							and that member cannot be the partition's secondary. </li>
					</ul>
				</li>
			</ul>
		</section>
		<section id="section_D2C66951FE38426F9C05050D2B9028D8">
			<title>Data Colocation Between Regions</title>
			<p>With data colocation, <keyword keyref="product_name"/> stores entries that are
				related across multiple data regions in a single member. <keyword
					keyref="product_name"/> does this by storing all of the regions' buckets with
				the same ID together in the same member. During rebalancing operations, <keyword
					keyref="product_name"/> moves these bucket groups together or not at all. </p>
			<p>So, for example, if you have one region with customer contact information and another
				region with customer orders, you can use colocation to keep all contact information
				and all orders for a single customer in a single member. This way, any operation
				done for a single customer uses the cache of only a single member. </p>
			<p>This figure shows two regions with data colocation where the data is partitioned by
				customer type. </p>
			<p>
				<image placement="inline" href="../../images_svg/colocated_partitioned_regions.svg"
					id="image_525AC474950F473ABCDE8E372583C5DF"
					><?xm-replace_text Paragraph?></image>
			</p>
			<p>Data colocation requires the same data partitioning mechanism for all of the
				colocated regions. You can use the default partitioning provided by <keyword
					keyref="product_name"/> or custom partitioning. </p>
			<p>You must use the same high availability settings across your colocated regions. </p>
		</section>
	</conbody>
</concept>
